#!/usr/bin/env ruby

# 2012 Jon Suderman
# https://github.com/suderman/symlink/

require 'rubygems'
require 'optparse'
require 'yaml'
require 'fileutils'
include FileUtils


# Create symbolic links based on a yaml file
class Symlink

  def initialize(source, options)
    @options = options
    source = File.expand_path source

    # Ensure the yaml file exists
    if File.file? source

      # Process the yaml file
      begin
        process YAML::load File.open(source)

      # Error message if the yaml file is malformed
      rescue Exception => se
        puts red("[error]#{se.to_s.split(':').last}") 
      end

    # Error message if the yaml file cannot be found
    else
      puts red("[error] \"#{source}\" not found!") 
    end

  end


  # Deal with each file in the tree
  def process(file, prepend_path='')
    file.each do |key, val|

      path = (key.match /^~\//) ? File.expand_path(key) : "#{prepend_path}/#{key}".gsub('//','/')
      file = val

      if file.class.to_s != "String"
        mkdir path
        process file, path
      else

        if file.match(/^\-\>/)
          points_to = file.split('->').last.strip
          ln points_to, path
        else
          dir = "#{path}/#{file}".gsub '//', '/'
          mkdir dir
        end

      end

    end
  end


  # Make a directory, using sudo if needed
  def mkdir(target)
    unless File.exist?(target)

      created = 'Created '

      # Attempt to create this directory, sudo-free
      output = `mkdir -p "#{target.strip}" 2>&1`

      # If that doesn't work, go full-sudo
      if output.match(/permission denied/i)
        created = 'Created (sudo) '
        `sudo mkdir -p "#{target.strip}" 2>&1`
      end

      # Report what happened
      puts blue(created) + gray(target)

    end
  end


  # Delete the target file
  def rm(target)

    # Attempt to delete this file, sudo-free
    deleted = 'Deleted '
    output = `rm -rf "#{target}" 2>&1`

    # If that doesn't work, go full-sudo
    if output.match(/permission denied/i)
      deleted = 'Deleted (sudo) '
      `sudo rm -rf "#{target}" 2>&1`
    end

    # Report what happened
    puts blue(deleted) + gray(target)
  end


  # Create a symbolic link
  def ln(target, destination)
    dest = File.expand_path destination
    targ = File.expand_path target

    # If the destination already exists as a file or directory
    if File.exist?(dest) and File.symlink?(dest)==false

      # Ask to delete, then retry linking
      if @options[:force] or ask "Wait! #{destination} already exists! Overwrite?"
        rm dest
        ln target, destination
      end

    # If the destination is a symlink or doesn't exist
    else

      # Ensure the target actually exists
      unless File.exist?(targ)
        puts red("[error]") + gray("\"#{target}\" not found!")
      else

        # First delete the destination if it exists as a directory
        rm dest if File.directory? dest

        # Attempt to link this file, sudo-free
        linked = 'Linked '
        output = `ln -sf "#{targ}" "#{dest}" 2>&1`

        # If that doesn't work, go full-sudo
        if output.match(/permission denied/i)
          linked = 'Linked (sudo) '
          `sudo ln -sf "#{targ}" "#{dest}" 2>&1`
        end

        # Report what happened
        puts blue(linked) + gray(dest) + yellow(' -> ') + gray(targ)

      end
    end
  end


  # Ask for permission; skip if force is enabled
  def ask(prompt)
    return true if @options[:force]
    print yellow("#{prompt} [y/n]"), ' '
    $stdin.gets.strip.match /^y/i
  end


  # Pretty colours
  def red(text)    "\033[31m#{text}\033[m" end
  def green(text)  "\033[32m#{text}\033[m" end
  def yellow(text) "\033[33m#{text}\033[m" end
  def blue(text)   "\033[34m#{text}\033[m" end
  def gray(text)   "\033[37m#{text}\033[m" end

end


# Default values for options
options = { :force => false, :help => false }

# Option parser
opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: symlink YAML"
  opt.on("-f","--force","Force existing files to be overwritten") { options[:force] = true }
  opt.on("-h","--help","help") { options[:help] = true }
end

opt_parser.parse!


# If there's an argument, let's do this:
if ARGV[0]
  source = ARGV[0]
  Symlink.new source, options

# If there's no arguments, show the help
else
  options[:help] = true
end

puts opt_parser if options[:help]
